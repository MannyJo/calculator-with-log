{"version":3,"sources":["components/App/App.js","components/Keypad/Keypad.js","components/CalcScreen/CalcScreen.js","components/CalcLog/CalcLog.js","serviceWorker.js","index.js"],"names":["socket","Keypad","btnClick","className","onClick","CalcScreen","result","type","value","disabled","CalcLog","results","map","i","key","expression","App","useState","setResult","setResults","initiated","isInitiated","useEffect","initSocket","initResults","on","expressions","emit","off","undefined","io","axios","get","then","data","catch","err","console","log","button","evaluate","error","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mOASIA,E,oFCwBWC,G,OA9BA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OACI,yBAAKC,UAAU,UACX,4BAAQC,QAASF,EAAS,KAAMC,UAAU,iBAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,iBAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,iBAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,kBAA1C,KAEA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,kBAA1C,KAEA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,kBAA1C,KAEA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,kBAA1C,KAEA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,mCAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,6BAA1C,KACA,4BAAQC,QAASF,EAAS,KAAMC,UAAU,kBAA1C,QCZGE,G,OAbI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACI,6BACI,2BACIH,UAAU,aACVI,KAAK,OACLC,MAAOF,EACPG,UAAU,OCMXC,G,OAbC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACI,yBAAKR,UAAU,WACX,yBAAKA,UAAU,YAAf,OAEIQ,EAAQC,KAAI,SAACN,EAAQO,GAAT,OACR,yBAAKV,UAAU,UAAUW,IAAKD,GAAIP,EAAOS,kB,OHmF9CC,MAjFf,WAAgB,IAAD,EACiBC,mBAAS,KAD1B,mBACLX,EADK,KACGY,EADH,OAEmBD,mBAAS,IAF5B,mBAELN,EAFK,KAEIQ,EAFJ,OAGsBF,oBAAS,GAH/B,mBAGLG,EAHK,KAGMC,EAHN,KAKbC,qBAAU,WACJF,IACFG,IACAC,IACAH,GAAY,MAEb,CAAED,IAELE,qBAAU,WAKR,OAJAtB,EAAOyB,GAAG,eAAe,SAAAC,GACvBP,EAAWO,MAGN,WACL1B,EAAO2B,KAAK,cACZ3B,EAAO4B,SAER,CAAEjB,IAEL,IAAMY,EAAa,WACH,OAAXvB,QAA8B6B,IAAX7B,IACpBA,EAAS8B,QAIPN,EAAc,WAClBO,IAAMC,IAAI,iCACTC,MAAK,SAAAtB,GACJQ,EAAWR,EAAQuB,SAClBC,OAAM,SAAAC,GACPC,QAAQC,IAAI,2CAA4CF,OA8B5D,OACE,yBAAKjC,UAAU,aACb,wBAAIA,UAAU,SAAd,cACA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAYG,OAAQA,IACpB,kBAAC,EAAD,CAAQJ,SAhCC,SAAAqC,GAAM,OAAI,WACzB,GAAc,MAAXA,EACDrB,EAAU,UACL,GAAc,MAAXqB,EAAgB,CACxB,IAAIxB,EACAP,EAEJ,IACEA,EAAQgC,YAASlC,GACjBS,EAAaT,EAAS,MAAQE,EAC9BU,EAAUV,GAEVe,IACAvB,EAAO2B,KAAK,aAAcZ,GAC1B,MAAO0B,GACPC,MAAM,2BAINxB,EADY,MAAXZ,EACS,GAAKiC,EAEL,GAAKjC,EAASiC,QAaxB,yBAAKpC,UAAU,iBACb,kBAAC,EAAD,CAASQ,QAASA,QIzERgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAM,GACLJ,QAAQI,MAAMA,EAAMiB,a","file":"static/js/main.71e01bba.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { evaluate } from 'mathjs';\nimport axios from 'axios';\nimport Keypad from '../Keypad/Keypad';\nimport CalcScreen from '../CalcScreen/CalcScreen';\nimport CalcLog from '../CalcLog/CalcLog';\nimport './App.css';\n\nlet socket;\n\nfunction App() {\n  const [ result, setResult ] = useState('0');\n  const [ results, setResults ] = useState([]);\n  const [ initiated, isInitiated ] = useState(false);\n\n  useEffect(() => {\n    if(!initiated) {\n      initSocket();\n      initResults();\n      isInitiated(true);\n    }\n  }, [ initiated ]);\n\n  useEffect(() => {\n    socket.on('expressions', expressions => {\n      setResults(expressions);\n    });\n\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    }\n  }, [ results ]);\n\n  const initSocket = () => {\n    if(socket === null || socket === undefined) {\n      socket = io();\n    }\n  }\n\n  const initResults = () => {\n    axios.get('http://localhost:5000/results')\n    .then(results => {\n      setResults(results.data);\n    }).catch(err => {\n      console.log('Error with getting results from server :', err);\n    });\n  }\n\n  const btnClick = button => () => {\n    if(button === 'C') {\n      setResult('0');\n    } else if(button === '=') {\n      let expression;\n      let value;\n\n      try {\n        value = evaluate(result);\n        expression = result + ' = ' + value;\n        setResult(value);\n\n        initSocket();\n        socket.emit('expression', expression);\n      } catch (error) {\n        alert('Wrong expression.');\n      }\n    } else {\n      if(result === '0') {\n        setResult('' + button);\n      } else {\n        setResult('' + result + button);\n      }\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Calculator</h1>\n      <div className=\"mainContainer\">\n        <div className=\"itemContainer\">\n          <CalcScreen result={result} />\n          <Keypad btnClick={btnClick} />\n        </div>\n        <div className=\"itemContainer\">\n          <CalcLog results={results} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './Keypad.css';\n\nconst Keypad = ({ btnClick }) => {\n    return (\n        <div className=\"keypad\">\n            <button onClick={btnClick('C')} className=\"keyColorWhite\">C</button>\n            <button onClick={btnClick('(')} className=\"keyColorWhite\">(</button>\n            <button onClick={btnClick(')')} className=\"keyColorWhite\">)</button>\n            <button onClick={btnClick('/')} className=\"keyColorYellow\">/</button>\n\n            <button onClick={btnClick('7')} className=\"keyColorDark keyFontWhite\">7</button>\n            <button onClick={btnClick('8')} className=\"keyColorDark keyFontWhite\">8</button>\n            <button onClick={btnClick('9')} className=\"keyColorDark keyFontWhite\">9</button>\n            <button onClick={btnClick('*')} className=\"keyColorYellow\">*</button>\n\n            <button onClick={btnClick('4')} className=\"keyColorDark keyFontWhite\">4</button>\n            <button onClick={btnClick('5')} className=\"keyColorDark keyFontWhite\">5</button>\n            <button onClick={btnClick('6')} className=\"keyColorDark keyFontWhite\">6</button>\n            <button onClick={btnClick('-')} className=\"keyColorYellow\">-</button>\n\n            <button onClick={btnClick('1')} className=\"keyColorDark keyFontWhite\">1</button>\n            <button onClick={btnClick('2')} className=\"keyColorDark keyFontWhite\">2</button>\n            <button onClick={btnClick('3')} className=\"keyColorDark keyFontWhite\">3</button>\n            <button onClick={btnClick('+')} className=\"keyColorYellow\">+</button>\n\n            <button onClick={btnClick('0')} className=\"keyColorDark keyFontWhite col-2\">0</button>\n            <button onClick={btnClick('.')} className=\"keyColorDark keyFontWhite\">.</button>\n            <button onClick={btnClick('=')} className=\"keyColorYellow\">=</button>\n        </div>\n    )\n}\n\nexport default Keypad;","import React from 'react';\nimport './CalcScreen.css';\n\nconst CalcScreen = ({ result }) => {\n    return (\n        <div>\n            <input \n                className=\"calcScreen\"\n                type=\"text\"\n                value={result}\n                disabled={true}\n            />\n        </div>\n    )\n}\n\nexport default CalcScreen;","import React from 'react';\nimport './CalcLog.css';\n\nconst CalcLog = ({ results }) => {\n    return (\n        <div className=\"logList\">\n            <div className=\"logTitle\">Log</div>\n            {\n                results.map((result, i) => (\n                    <div className=\"logItem\" key={i}>{result.expression}</div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default CalcLog;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}